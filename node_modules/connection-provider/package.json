{
  "name": "connection-provider",
  "version": "1.0.1",
  "description": "An easy way to provide resources and connections to Object instances",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "mysql",
    "database",
    "connections",
    "resources",
    "provider"
  ],
  "author": {
    "name": "Andre Vermeulen",
    "email": "andre.vermeulen@gmail.com"
  },
  "license": "ISC",
  "dependencies": {
    "bluebird": "^3.2.2",
    "mongodb": "^2.0.45",
    "mysql": "^2.9.0"
  },
  "readme": "# Connection Provider\n\nExpress JS middleware that enables decoupling resources and components, making testing easier.\n\nOnly supporting mysql connections.\n\n## How to use it:\n\n```javascript\n\n//In Express JS\n\nvar connectionProvider = require('connection-provider');\n\nvar mysqlDetails = {\n      host: 'localhost',\n      user: 'user_name',\n      password: 'password',\n      port: 3306,\n      database: 'db_name'\n};\n\nvar serviceSetupCallback = function(connection){\n\treturn {\n\t\tserviceName : new ServiceName(connection),\n    // you can inject other resources as well\n\t\t//processor : new Processor(new UpdateDetails(connection, io))\n\t}\n};\n\napp.use(connectionProvider(mysqlDetails, serviceSetupCallback));\n\n//this adds a services object to request\napp.get('/users', function(req, res){\n\n  req.getServices()\n        .then(function(services){\n            var dataService = services.dataService;\n            return dataService.getUsers()\n        })\n        .then(function(users){\n            res.render('users', { users : users });\n        });\n\n});\n\n```\n",
  "readmeFilename": "readme.md",
  "_id": "connection-provider@1.0.1",
  "dist": {
    "shasum": "e2bc34eec7afc15d978277d16da37f6a5fab977a"
  },
  "_resolved": "git://github.com/avermeulen/connection-provider#134302f22560d2b99c1ea662b68745f0b29a7253",
  "_from": "git://github.com/avermeulen/connection-provider",
  "_fromGithub": true
}
