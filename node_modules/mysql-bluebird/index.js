var Promise = require('bluebird');
var mysql = require('mysql');

/**
 * Main constructor to set the options for the MySQL Pool connection.
 * @param options The options to use for the MySQL connection.
 * @constructor
 */
function MySQL(options) {
  this.pool = null;
  this.options = options;
}

/**
 * Start function to connect to the MySQL server.
 */
MySQL.prototype.start = function () {
  var self = this;
  return Promise.resolve().then(function () {
    self.pool = mysql.createPool(self.options);
  });
};

/**
 * This function handles the disconnecting of a MySQL pool connection to a server.
 */
MySQL.prototype.end = function () {
  var self = this;
  return Promise.resolve().then(function () {
    self.pool.end(function (err) {
      if (err) { return Promise.reject(err); }
    })
  });
};

/**
 * This function manages the MySQL queries, you can use pass over parameters for the query along with a custom connection
 * to use for the query. (I.E. If you want to query a different data to the one you connected too)
 * @param query The query to perform against the server.
 * @param params The parameters to pass along with the query. (Optional)
 * @param con Custom connection to use for the query. (Optional)
 * @returns {bluebird|exports|module.exports} Returns the query result.
 */
MySQL.prototype.query = function (query, params, con) {
  var self = this;
  params = params || [];
  return new Promise(function (resolve, reject) {
    if (con) {
      con.query(query, params, function (err, res) {
        if (err) {
          if (con) { con.release(); }
          reject(err);
        }
        con.release();
        resolve(res);
      });
    } else {
      self.pool.getConnection(function (err, con) {
        if (err) {
          if (con) { con.release(); }
          reject(err);
        } else {
          con.query(query, params, function (err, res) {
            if (err) {
              if (con) { con.release(); }
              reject(err);
            }
            con.release();
            resolve(res);
          });
        }
      });
    }
  });
};

/**
 * This function allows you to get a connection to the MySQL server.
 * @returns {bluebird|exports|module.exports} Return a MySQL connection to the server.
 */
MySQL.prototype.getConnection = function () {
  var self = this;
  return new Promise(function (resolve, reject) {
    self.pool.getConnection(function (err, con) {
      if (err) {
        if (con) { con.release(); }
        reject(err);
      } else {
        resolve(con);
      }
    });
  });
};

/**
 * This function enables you to change user options for the MySQL connection. (I.E. User, Database)
 * @param con MySQL connection to change the options for.
 * @param params The parameters to use to edit the connection.
 * @returns {bluebird|exports|module.exports} Returns the updated connection details.
 */
MySQL.prototype.changeUser = function (con, params) {
  return new Promise(function (resolve, reject) {
    con.changeUser(params, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve(con);
      }
    });
  });
};

module.exports = MySQL;